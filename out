diff --git a/libft-puls/ft_lstmap.c b/libft-puls/ft_lstmap.c
index 0e5de31..ca6e8db 100755
--- a/libft-puls/ft_lstmap.c
+++ b/libft-puls/ft_lstmap.c
@@ -6,13 +6,14 @@
 /*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/05/29 14:16:02 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/08/24 18:43:50 by hhino            ###   ########.fr       */
+/*   Updated: 2023/10/03 12:04:30 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "libft.h"
 
-t_libft_list	*ft_lstmap(t_libft_list *lst, void *(*f)(void *), void (*del)(void *))
+t_libft_list	*ft_lstmap(t_libft_list *lst, void *(*f)(void *), \
+		void (*del)(void *))
 {
 	t_libft_list	*new_lst;
 	t_libft_list	*new_set;
diff --git a/libft-puls/ft_printf.c b/libft-puls/ft_printf.c
index b296d67..225081a 100644
--- a/libft-puls/ft_printf.c
+++ b/libft-puls/ft_printf.c
@@ -6,7 +6,7 @@
 /*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/21 19:16:19 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/10/02 19:59:06 by hhino            ###   ########.fr       */
+/*   Updated: 2023/10/03 12:14:45 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -49,14 +49,15 @@ int	ft_printf(const char *format, ...)
 //fdを変更できるような実装に変更
 //進数に関しては必要箇所でそれぞれ定義
 
-int	error_printf(const char *format, ...)//debug用
+//error出力用
+int	error_printf(const char *format, ...)
 {
 	va_list	ap;
 	ssize_t	count;
 	ssize_t	count_tmp;
 	int		fd;
 
-	fd = 2;//エラー検知の場合は２番
+	fd = 2;
 	count = 0;
 	va_start (ap, format);
 	if (!format)
@@ -78,15 +79,16 @@ int	error_printf(const char *format, ...)//debug用
 	return (count);
 }
 
-int	d_printf(const char *format, ...)//debug用
+//debug用
+int	d_printf(const char *format, ...)
 {
-	return(0) ;
 	va_list	ap;
 	ssize_t	count;
 	ssize_t	count_tmp;
 	int		fd;
 
-	fd = 2;//エラー検知の場合は２番
+	return (0);
+	fd = 2;
 	count = 0;
 	va_start (ap, format);
 	if (!format)
@@ -103,8 +105,6 @@ int	d_printf(const char *format, ...)//debug用
 		format++;
 	}
 	va_end (ap);
-	if (count_tmp < 0 || INT_MAX < count + count_tmp)
-		return (-1);
 	return (count);
 }
 
@@ -114,7 +114,7 @@ static ssize_t	d_check_format(int fd, const char *fmt, va_list ap)
 		return (write(fd, "%", 1));
 	else if (*fmt == 'c')
 		return (ftp_putchar_fd (va_arg(ap, int), fd));
-	else if (*fmt == 'p')//pから変更
+	else if (*fmt == 'p')
 		return (ftp_put_pointer(va_arg(ap, uintptr_t), fd, "0123456789abcdef"));
 	else if (*fmt == 's')
 		return (ftp_putstr_fd (va_arg(ap, char *), fd));
diff --git a/libft-puls/ft_printf_main.c b/libft-puls/ft_printf_main.c
deleted file mode 100644
index cebb807..0000000
--- a/libft-puls/ft_printf_main.c
+++ /dev/null
@@ -1,154 +0,0 @@
-/* ************************************************************************** */
-/*                                                                            */
-/*                                                        :::      ::::::::   */
-/*   ft_printf_main.c                                   :+:      :+:    :+:   */
-/*                                                    +:+ +:+         +:+     */
-/*   By: tokazaki <tokazaki@student.42.fr>          +#+  +:+       +#+        */
-/*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2023/06/20 19:55:42 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/06/22 18:49:55 by tokazaki         ###   ########.fr       */
-/*                                                                            */
-/* ************************************************************************** */
-
-#include "ft_printf.h"
-#include <stdio.h>
-#include <stdio.h>     // For printf
-#include <stdlib.h>    // For calloc, exit
-#include <string.h>    // For memset
-#include <limits.h>    // For INT_MAX
-
-int main ()
-{
-	char	*str;
-
-	str = "Hello, world!";
-	ft_printf("aaaa%c %c %c %c\n", '1', 'B', 'C', 'D');
-	printf("aaaa%c %c %c %c\n", 'A', 'B', 'C', 'D');
-	printf("\n");
-	ft_printf("%s\n", str);
-	printf("%s\n", str);
-	printf("\n");
-	ft_printf("%p\n", &str[0]);
-	printf("%p\n", &str[0]);
-	printf("\n");
-	ft_printf("%d\n", INT_MIN);
-	printf("%d\n", INT_MIN);
-	printf("\n");
-	ft_printf("%i\n", 1 + 1);
-	printf("%i\n", 1 + 1);
-	printf("\n");
-	ft_printf("%x\n", 42);
-	printf("%x\n", 42);
-	printf("\n");
-	ft_printf("%X\n", 4242);
-	printf("%X\n", 4242);
-	printf("\n");
-	printf("%d %c %s %p\n", 4, '1', "11", &str[3]);
-	ft_printf("%d %c %s %p\n", 4, '1', "11", &str[3]);
-	printf("\n");
-	ft_printf("Hello, %d, %d, %i, %i.\n", INT_MAX, INT_MIN, INT_MAX, INT_MIN);
-	printf("Hello, %d, %d, %i, %i.\n", INT_MAX, INT_MIN, INT_MAX, INT_MIN);
-	printf("\n");
-	ft_printf("Hello, %u, %u, %u\n", 0x7fffffff, 0x80000000, 0xffffffff);
-	printf("Hello, %u, %u, %u\n", 0x7fffffff, 0x80000000, 0xffffffff);
-	printf("\n");
-	ft_printf("Hello, %x, %x, %x\n", 0x7fffffff, 0x80000000, 0xffffffff);
-	printf("Hello, %x, %x, %x\n", 0x7fffffff, 0x80000000, 0xffffffff);
-	ft_printf("Hello, %X, %X, %X\n", 0x7fffffff, 0x80000000, 0xffffffff);
-	printf("Hello, %X, %X, %X\n", 0x7fffffff, 0x80000000, 0xffffffff);
-	printf("\n");
-	ft_printf("Hello, %p, %p, %p\n", &str[0], &str[1], &str[2]);
-	printf("Hello, %p, %p, %p\n", &str[0], &str[1], &str[2]);
-	printf("\n");
-
-	//通常の文字の出力
-	int i = printf("aaa\n");
-	int j = ft_printf("aaa\n");
-	printf("%d:%d\n\n",i,j);
-
-	//空文字の出力
-	i = printf("");
-	j = ft_printf("");
-	printf("%d:%d\n\n",i,j);
-
-	//%の出力
-	i = printf("%%\n");
-	j = ft_printf("%%\n");
-	printf("%d:%d\n\n",i,j);
-
-	//cの出力
-	int c = '5';
-	i = printf("%c%c\n",c,c);
-	j = ft_printf("%c%c\n",c,c);
-	printf("%d:%d\n\n",i,j);
-
-	//sでNULLの出力
-	char *n = NULL;
-	i = printf("%s%s\n",n,n);
-	j = ft_printf("%s%s\n",n,n);
-	printf("%d:%d\n\n",i,j);
-	
-	//inの出力
-	int in = 123456789;
-	i = printf("ex:%d:%i\n",in,in);
-	j = ft_printf("ft:%d:%i\n",in,in);
-	printf("%d:%d\n\n",i,j);
-
-	//xの出力
-	int x = -123456789;
-	i = printf("ex:%x%X\n",x,x);
-	j = ft_printf("ft:%x%X\n",x,x);
-	printf("%d:%d\n\n",i,j);
-
-	//uの出力
-	unsigned int u = -1;
-	i = printf("ex:%u:%u\n",u,u);
-	j = ft_printf("ft:%u:%u\n",u,u);
-	printf("%d:%d\n\n",i,j);
-
-	//pの出力
-	i = printf("ex:%p:%p\n",u,x);
-	j = ft_printf("ft:%p:%p\n",u,x);
-	printf("%d:%d\n\n",i,j);
-
-	//pの出力
-	i = printf("ex:%p:%p\n",LONG_MIN, LONG_MAX);
-	j = ft_printf("ft:%p:%p\n",LONG_MIN, LONG_MAX);
-	printf("pの出力longMAX:%u:%d:%d\n\n",LONG_MAX,i,j);
-
-
-	//pの出力
-	i = printf("ex:%p:%p\n",-ULONG_MAX, ULONG_MAX);
-	j = ft_printf("ft:%p:%p\n",-ULONG_MAX, ULONG_MAX);
-	printf("pの出力UlongMAX:%u:%d:%d\n\n",ULONG_MAX,i,j);
-	
-	//pの出力
-	i = printf("ex:%p:%p\n",90000, 0);
-	j = ft_printf("ft:%p:%p\n",90000, 0);
-	printf("pの出力%d:%d\n\n",i,j);
-
-	//ulの出力
-	i = printf("ex:%u:%x\n",ULONG_MAX, ULONG_MAX);
-	j = ft_printf("ft:%u:%x\n",ULONG_MAX, ULONG_MAX);
-	printf("ulの出力%d:%d\n\n",i,j);
-
-	//INT_MAX超えの出力
-	i = printf("ex:%u:%x\n",ULONG_MAX, ULONG_MAX);
-	j = ft_printf("ft:%u:%x\n",ULONG_MAX, ULONG_MAX);
-	printf("%d:%d\n\n",i,j);
-
-    char *sss = (char *)calloc(1, (size_t)INT_MAX + 10);
-    memset(sss, 'a', (size_t)INT_MAX + 5);
-    i = printf("%s\n", sss);
-    j = ft_printf("%s\n", sss);
-	printf("INT_MAX超えの出力%d:%d\n\n",i,j);
-
-	//INT_MAX超えの出力
-    sss = (char *)calloc(1, (size_t)INT_MAX + 10);
-    memset(sss, 'a', (size_t)INT_MAX -3);
-    i = printf("aaa%s\n", sss);
-    j = ft_printf("aaa%s\n", sss);
-	printf("%d:%d\n\n",i,j);
-
-	exit (0);
-}
diff --git a/libft-puls/gnl_main.c b/libft-puls/gnl_main.c
deleted file mode 100755
index 436ed8e..0000000
--- a/libft-puls/gnl_main.c
+++ /dev/null
@@ -1,30 +0,0 @@
-#include <fcntl.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include "libft.h"
-#include "get_next_line.h"
-#include "get_next_line_bonus.h"
-
-__attribute__((destructor))
-static void destructor() {
-    system("leaks -q a.out");
-}
-
-int	main(void)
-{
-	int i = 0;
-	int fd = 0;//open("a.txt",O_RDONLY);
-	while(i++ < 10)
-	{
-		char *line = get_next_line(fd);
-		printf ("%d:%s",i,line);
-		free(line);
-	}
-	return (0);
-}
-
-void *mymalloc(size_t size)
-{
-	size = 0;
-	return (NULL);
-}
diff --git a/libft-puls/libft.h b/libft-puls/libft.h
index 28023c2..4f12b1c 100755
--- a/libft-puls/libft.h
+++ b/libft-puls/libft.h
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   libft.h                                            :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
+/*   By: tokazaki <tokazaki@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/05/17 13:38:04 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/09/28 15:06:50 by tokazaki         ###   ########.fr       */
+/*   Updated: 2023/10/03 12:07:26 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -26,52 +26,54 @@ typedef struct s_libft_list
 	struct s_libft_list	*next;
 }	t_libft_list;
 
-int		ft_atoi(const char *str);
-char	*ft_itoa(int nbr);
-void	ft_bzero(void *s, size_t n);
-void	*ft_calloc(size_t count, size_t size);
-int		ft_isalpha(int c);
-int		ft_isascii(int c);
-int		ft_isalnum(int c);
-int		ft_isdigit(int c);
-int		ft_isprint(int c);
-void	*ft_memcpy(void *dst, const void *src, size_t n);
-void	*ft_memmove(void *dst, const void *src, size_t len);
-void	*ft_memset(void *b, int c, size_t len);
-void	*ft_memchr(const void *s, int c, size_t n);
-int		ft_memcmp(const void *s1, const void *s2, size_t n);
-int		ft_toupper(int c);
-int		ft_tolower(int c);
-char	*ft_strdup(char *src);
-char	*ft_strnstr(const char *haystack, const char *needle, size_t len);
-char	*ft_substr(char const *s, unsigned int start, size_t len);
-char	*ft_strjoin(char const *s1, char const *s2);
-char	*ft_strtrim(char const *s1, char const *set);
-char	*ft_strtrim(char const *s1, char const *set);
-char	*ft_strmapi(char const *s, char (*f)(unsigned int, char));
-char	*ft_strchr(const char *s, int c);
-char	*ft_strrchr(const char *s, int c);
-void	ft_striteri(char *s, void (*f)(unsigned int, char*));
-size_t	ft_strlen(const char *src);
-int		ft_strncmp(const char *s1, const char *s2, size_t n);
-size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize);
-size_t	ft_strlcat(char *dest, const char *src, size_t dstsize);
-void	ft_putchar_fd(char c, int fd);
-void	ft_putstr_fd(char *s, int fd);
-void	ft_putnbr_fd(int c, int fd);
-void	ft_putendl_fd(char *s, int fd);
-char	**ft_split(const char *str, char charset);
-int		ft_str_is_num(char *str);
+int				ft_atoi(const char *str);
+char			*ft_itoa(int nbr);
+void			ft_bzero(void *s, size_t n);
+void			*ft_calloc(size_t count, size_t size);
+int				ft_isalpha(int c);
+int				ft_isascii(int c);
+int				ft_isalnum(int c);
+int				ft_isdigit(int c);
+int				ft_isprint(int c);
+void			*ft_memcpy(void *dst, const void *src, size_t n);
+void			*ft_memmove(void *dst, const void *src, size_t len);
+void			*ft_memset(void *b, int c, size_t len);
+void			*ft_memchr(const void *s, int c, size_t n);
+int				ft_memcmp(const void *s1, const void *s2, size_t n);
+int				ft_toupper(int c);
+int				ft_tolower(int c);
+char			*ft_strdup(char *src);
+char			*ft_strnstr(const char *haystack, \
+					const char *needle, size_t len);
+char			*ft_substr(char const *s, unsigned int start, size_t len);
+char			*ft_strjoin(char const *s1, char const *s2);
+char			*ft_strtrim(char const *s1, char const *set);
+char			*ft_strtrim(char const *s1, char const *set);
+char			*ft_strmapi(char const *s, char (*f)(unsigned int, char));
+char			*ft_strchr(const char *s, int c);
+char			*ft_strrchr(const char *s, int c);
+void			ft_striteri(char *s, void (*f)(unsigned int, char*));
+size_t			ft_strlen(const char *src);
+int				ft_strncmp(const char *s1, const char *s2, size_t n);
+size_t			ft_strlcpy(char *dst, const char *src, size_t dstsize);
+size_t			ft_strlcat(char *dest, const char *src, size_t dstsize);
+void			ft_putchar_fd(char c, int fd);
+void			ft_putstr_fd(char *s, int fd);
+void			ft_putnbr_fd(int c, int fd);
+void			ft_putendl_fd(char *s, int fd);
+char			**ft_split(const char *str, char charset);
+int				ft_str_is_num(char *str);
 
 t_libft_list	*ft_lstnew(void *content);
-int		ft_lstsize(t_libft_list *lst);
+int				ft_lstsize(t_libft_list *lst);
 t_libft_list	*ft_lstnew(void *content);
-t_libft_list	*ft_lstmap(t_libft_list *lst, void *(*f)(void *), void (*del)(void *));
+t_libft_list	*ft_lstmap(t_libft_list *lst, void *(*f)(void *), \
+					void (*del)(void *));
 t_libft_list	*ft_lstlast(t_libft_list *lst);
-void	ft_lstdelone(t_libft_list *lst, void (*del)(void*));
-void	ft_lstiter(t_libft_list *lst, void (*f)(void *));
-void	ft_lstclear(t_libft_list **lst, void (*del)(void*));
-void	ft_lstadd_front(t_libft_list **lst, t_libft_list *new);
-void	ft_lstadd_back(t_libft_list **lst, t_libft_list *new);
+void			ft_lstdelone(t_libft_list *lst, void (*del)(void*));
+void			ft_lstiter(t_libft_list *lst, void (*f)(void *));
+void			ft_lstclear(t_libft_list **lst, void (*del)(void*));
+void			ft_lstadd_front(t_libft_list **lst, t_libft_list *new);
+void			ft_lstadd_back(t_libft_list **lst, t_libft_list *new);
 
 #endif
diff --git a/srcs/builtin/cd.c b/srcs/builtin/cd.c
index 245244e..5a147b8 100644
--- a/srcs/builtin/cd.c
+++ b/srcs/builtin/cd.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   cd.c                                               :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
+/*   By: tokazaki <tokazaki@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/08/31 18:15:57 by hhino             #+#    #+#             */
-/*   Updated: 2023/10/02 20:07:36 by hhino            ###   ########.fr       */
+/*   Updated: 2023/10/03 18:05:36 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -22,12 +22,18 @@ void	ex_cd(t_info *status, t_stack *data)
 		if (search_env(status, "HOME") != NULL)
 			chdir(search_env(status, "HOME"));
 		else
+		{
 			error_printf("cd: HOME not set\n");
+			status->exit_status = 1;
+		}
 	}
 	else if (check_access(list->content, status) != NULL)
 		chdir(list->content);
 	else if (check_access(list->content, status) == NULL)
+	{
 		error_printf("%s: No such file or directory\n", list->content);
+		status->exit_status = 1;
+	}
 	return ;
 }
 
diff --git a/srcs/builtin/pwd.c b/srcs/builtin/pwd.c
index 169e828..4a4d7d6 100644
--- a/srcs/builtin/pwd.c
+++ b/srcs/builtin/pwd.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   pwd.c                                              :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
+/*   By: tokazaki <tokazaki@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/08/21 15:44:23 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/09/25 18:54:13 by hhino            ###   ########.fr       */
+/*   Updated: 2023/10/03 12:48:53 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -18,8 +18,7 @@ void	ex_pwd(void)
 	char	buf[PATH_MAX];
 
 	path = getcwd(buf, PATH_MAX);
-	if (path == NULL) //PATH_MAXより長いディレクトリだった場合error
-		return ;
+	if (path == NULL)
+		exit (1);
 	ft_printf("%s\n", buf);
 }
-
diff --git a/srcs/lexer_panda/chck_flag_error.c b/srcs/lexer_panda/chck_flag_error.c
index dd9bf96..81c462a 100644
--- a/srcs/lexer_panda/chck_flag_error.c
+++ b/srcs/lexer_panda/chck_flag_error.c
@@ -6,7 +6,7 @@
 /*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/09/25 18:52:48 by hhino             #+#    #+#             */
-/*   Updated: 2023/09/25 18:53:03 by hhino            ###   ########.fr       */
+/*   Updated: 2023/10/03 12:38:14 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -22,7 +22,8 @@ void	lexer_panda_error_check(int *flag, t_info *status)
 		ft_putendl_fd(" \"minishell: syntax error near unexpected token `\''",
 			1);
 	if (*flag & NEED_FILE)
-		ft_putendl_fd(" \"minishell: syntax error near unexpected token `newline'",
+		ft_putendl_fd(" \"minishell: syntax error near \
+				unexpected token `newline'",
 			1);
 	if (!(*flag & COMMAND))
 		ft_putendl_fd(" \"minishell: syntax error near unexpected token `|'",
diff --git a/srcs/lexer_panda/getpath.c b/srcs/lexer_panda/getpath.c
index a52d7f9..0e259b8 100644
--- a/srcs/lexer_panda/getpath.c
+++ b/srcs/lexer_panda/getpath.c
@@ -6,7 +6,7 @@
 /*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/08/13 19:56:26 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/09/29 16:58:09 by tokazaki         ###   ########.fr       */
+/*   Updated: 2023/10/03 12:35:48 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -32,9 +32,17 @@ char	**getpath(t_info *status)
 	return (path);
 }
 
+void	*command_and_split_free(char *command, char **path)
+{
+	free(command);
+	split_free(path);
+	return (NULL);
+}
+
 char	*check_path(char *command, char **path)
 {
 	int		i;
+	char	*collect_path;
 
 	i = 0;
 	if (!command || !path)
@@ -43,23 +51,16 @@ char	*check_path(char *command, char **path)
 	{
 		path[i] = ft_strjoin_free(path[i], command, NEITHER_FREE);
 		if (path[i] == NULL)
-		{
-			free(command);
-			split_free(path);
-			return (NULL);
-		}
+			return (command_and_split_free(command, path));
 		if (access(path[i], F_OK) == 0)
 		{
-			free(command);
-			char *collect_path = ft_strdup(path[i]);
-			split_free(path);
+			collect_path = ft_strdup(path[i]);
+			command_and_split_free(command, path);
 			return (collect_path);
 		}
 		i++;
 	}
-	free(command);
-	split_free(path);
-	return (NULL);
+	return (command_and_split_free(command, path));
 }
 
 int	access_ee(char *command, int flag, int free_flag)
@@ -76,9 +77,11 @@ char	*check_access(char *command, t_info *status)
 {
 	if (!command)
 		return (NULL);
-	if (access_ee(ft_strtrim_free(command, "./", NEITHER_FREE), F_OK, FIRST_FREE) == 0)
+	if (access_ee(ft_strtrim_free(command, "./", NEITHER_FREE), \
+				F_OK, FIRST_FREE) == 0)
 		return (ft_strtrim_free(command, "./", NEITHER_FREE));
 	else if (access(command, F_OK) == 0)
 		return (command);
-	return (check_path(ft_strjoin_free("/", command, NEITHER_FREE), getpath(status)));
+	return (check_path(ft_strjoin_free("/", command, NEITHER_FREE), \
+				getpath(status)));
 }
diff --git a/srcs/lexer_panda/lexer_panda.c b/srcs/lexer_panda/lexer_panda.c
index 1e0dc74..b030e4e 100644
--- a/srcs/lexer_panda/lexer_panda.c
+++ b/srcs/lexer_panda/lexer_panda.c
@@ -6,7 +6,7 @@
 /*   By: tokazaki <tokazaki@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/08/27 17:48:21 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/10/02 14:44:02 by tokazaki         ###   ########.fr       */
+/*   Updated: 2023/10/03 19:31:15 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -28,7 +28,7 @@ char	*ft_strtrim_free(char const *s1, char const *set, int free_flag);
 
 char	*ft_strjoin_free(char const *s1, char const *s2, int free_flag)
 {
-	char *joined_str;
+	char	*joined_str;
 
 	joined_str = ft_strjoin(s1, s2);
 	if (free_flag == FIRST_FREE || free_flag == BOTH_FREE)
@@ -49,7 +49,7 @@ char	*ft_strjoin_free(char const *s1, char const *s2, int free_flag)
 
 char	*ft_strtrim_free(char const *s1, char const *set, int free_flag)
 {
-	char *trimed_str;
+	char	*trimed_str;
 
 	trimed_str = ft_strtrim(s1, set);
 	if (free_flag == FIRST_FREE || free_flag == BOTH_FREE)
@@ -61,7 +61,8 @@ char	*ft_strtrim_free(char const *s1, char const *set, int free_flag)
 
 int	analysis_char(char c)
 {
-	if (ft_isdigit(c) || ft_isalpha(c) || c =='-' || c =='\"' || c =='\'' || c =='/' || c =='$' || c =='.'|| c =='+' || c =='_')
+	if (ft_isdigit(c) || ft_isalpha(c) || c == '-' || c == '\"' || c == '\'' \
+		|| c == '/' || c == '$' || c == '.' || c == '+' || c == '_')
 		return (1);
 	if (c == ' ')
 		return (2);
@@ -78,16 +79,15 @@ int	analysis_char(char c)
 
 void	search_env_variable(char *line, int *i, int *flag)
 {
-	d_printf("[search_env_variable]");
 	while ((line[*i] != '$' || *flag & S_QUOTE) && line[*i] != '\0')
 	{
-		d_printf("\n%c",line[*i]);
 		if ((line[*i] == '\'' || line[*i] == '\"') && !(*flag & IN_QUOTE))
 		{
 			plusle_quote(line[*i], flag);
 			*i += 1;
 		}
-		else if ((line[*i] == '\'' && *flag & S_QUOTE) || (line[*i] == '\"' && *flag & D_QUOTE))
+		else if ((line[*i] == '\'' && *flag & S_QUOTE) || \
+			(line[*i] == '\"' && *flag & D_QUOTE))
 		{
 			minun_quote(line[*i], flag);
 			*i += 1;
@@ -104,7 +104,6 @@ void	search_env_variable(char *line, int *i, int *flag)
 		else
 			*i += 1;
 	}
-	d_printf("[serch_env_var:%c]",line[*i]);
 }
 
 int	find_next_token(char *line, int i, int flag)
@@ -112,28 +111,28 @@ int	find_next_token(char *line, int i, int flag)
 	int	k;
 
 	k = 0;
-	while (line[i + k] != '\'' && line[i + k] != '\"' && line[i + k] != ' ' && line[i + k] != '\0' && line[i + k] != '$' && \
-		((line[i + k] != '\'' && line[i + k] != '<' && \
+	while (line[i + k] != '\'' && line[i + k] != '\"' && \
+		line[i + k] != ' ' && line[i + k] != '\0' && line[i + k] != '$' && \
+		((line[i + k] != '<' && \
 		line[i + k] != '>' && line[i + k] != '|') || (flag & D_QUOTE)))
 		k++;
-	d_printf("[find_next_token:%d %c]",k,line[i+k]);
+	d_printf("[find_next_token:%d %c]", k, line[i + k]);
 	return (k);
 }
 
 char	*process_single_dollar_in_d_quote(t_info *status, char *line, int *i, char *result)
 {
-		result = ft_strjoin_free(result, "$", FIRST_FREE);
-		*i += 1;
-		return (result);
-		(void)status;
-		(void)line;
+	result = ft_strjoin_free(result, "$", FIRST_FREE);
+	*i += 1;
+	return (result);
+	(void)status;
+	(void)line;
 }
 
 char	*process_single_double_dollar(t_info *status, char *line, int *i, char *result)
 {
 	char	*exit_nbr;
 
-
 	if (line[*i] == '$' && (line[*i + 1] == '\0' || line[*i + 1] == ' '))
 	{
 		result = ft_strjoin_free(result, "$", FIRST_FREE);
@@ -154,55 +153,86 @@ char	*process_single_double_dollar(t_info *status, char *line, int *i, char *res
 	(void)status;
 }
 
-char	*search_and_append_env(t_info *status, char *result, char *post_word, int *flag)
+void	skip_space(char *post_word, int *i)
 {
-	d_printf("[s_a_ap_env]\n");
-	int	i;
-	int	j;
+	while (post_word[*i] == ' ')
+		i += 1;
+}
+
+char	*make_first_space_splited_word(char *result, char *post_word, int i, int j)
+{
+	char	*space_splited_word;
+
+	result = ft_strjoin_free(result, "\'", FIRST_FREE);
+	space_splited_word = ft_substr(post_word, 0, i - j);
+	result = ft_strjoin_free(result, "\'", FIRST_FREE);
+	return (result);
+}
+
+char	*append_non_quote_env(char *result, char *post_word)
+{
+	int		i;
+	int		j;
 	char	*space_splited_word;
 
 	i = 0;
 	j = 0;
+	while (post_word[i] != '\0')
+	{
+		while (post_word[i] != '\0' && post_word[i] != ' ')
+			i++;
+		if (j == 0)
+			result = make_first_space_splited_word(result, post_word, i, j);
+		// {
+		// 	result = ft_strjoin_free(result, "\'", FIRST_FREE);
+		// 	space_splited_word = ft_substr(post_word, 0, i - j);
+		// 	result = ft_strjoin_free(result, "\'", FIRST_FREE);
+		// }
+		result = ft_strjoin_free(result, "\'", FIRST_FREE);
+		space_splited_word = ft_substr(post_word, j, i - j);
+		result = ft_strjoin_free(result, space_splited_word, BOTH_FREE);
+		skip_space(post_word, &i);
+		if (post_word[i - 1] == ' ')
+			result = ft_strjoin_free(result, "\' ", FIRST_FREE);
+		else
+			result = ft_strjoin_free(result, "\'", FIRST_FREE);
+		j = i;
+	}
+	return (result);
+}
+
+char	*search_and_append_env(t_info *status, char *result, char *post_word, int *flag)
+{
+	d_printf("[s_a_ap_env]\n");
 	post_word = search_env(status, post_word);
 	if (post_word != NULL)
 	{
 		if (*flag & D_QUOTE)
-		{
-//			char *dquote = ft_strchr(post_word, '\'');
-//			char *squote = ft_strchr(post_word, '\"');
-//		d_printf("[d:%s s:%s]\n",dquote,squote);
-//			if (dquote == NULL || (squote < dquote && squote != NULL))
-				result = ft_strjoin_free(result, post_word, FIRST_FREE);
-//			else
-//			{
-//				char *chageptr = ft_strrchr(result, '\"');
-//				*chageptr = '\'';
-//				result = ft_strjoin_free(result, post_word);
-//			}
-		}
+			result = ft_strjoin_free(result, post_word, FIRST_FREE);
 		else
 		{
-			while(post_word[i] != '\0')
-			{
-				while(post_word[i] != '\0' && post_word[i] != ' ')
-					i++;
-				if (j == 0)
-				{
-					result = ft_strjoin_free(result, "\'", FIRST_FREE );
-					space_splited_word = ft_substr(post_word, 0, i - j);
-					result = ft_strjoin_free(result, "\'", FIRST_FREE);
-				}
-				result = ft_strjoin_free(result, "\'", FIRST_FREE);
-				space_splited_word = ft_substr(post_word, j, i - j);
-				result = ft_strjoin_free(result, space_splited_word, BOTH_FREE);
-				while(post_word[i] == ' ')
-					i++;
-				if (post_word[i - 1] == ' ')
-					result = ft_strjoin_free(result, "\' ", FIRST_FREE);
-				else
-					result = ft_strjoin_free(result, "\'", FIRST_FREE);
-				j = i;
-			}
+			result = append_non_quote_env(result, post_word);
+			// while (post_word[i] != '\0')
+			// {
+			// 	while (post_word[i] != '\0' && post_word[i] != ' ')
+			// 		i++;
+			// 	if (j == 0)
+			// 	{
+			// 		result = ft_strjoin_free(result, "\'", FIRST_FREE);
+			// 		space_splited_word = ft_substr(post_word, 0, i - j);
+			// 		result = ft_strjoin_free(result, "\'", FIRST_FREE);
+			// 	}
+			// 	result = ft_strjoin_free(result, "\'", FIRST_FREE);
+			// 	space_splited_word = ft_substr(post_word, j, i - j);
+			// 	result = ft_strjoin_free(result, space_splited_word, BOTH_FREE);
+			// 	while (post_word[i] == ' ')
+			// 		i++;
+			// 	if (post_word[i - 1] == ' ')
+			// 		result = ft_strjoin_free(result, "\' ", FIRST_FREE);
+			// 	else
+			// 		result = ft_strjoin_free(result, "\'", FIRST_FREE);
+			// 	j = i;
+			// }
 		}
 	}
 	d_printf("[result:%s]\n",result);
@@ -278,24 +308,24 @@ int	check_and_count_pipe(t_info *status, char *line)
 
 char	*check_dollar(t_info *status, char *line)
 {
-	d_printf("[check_dollar]");
-	int	i;
-	int	flag;
-	int	j;
+	int		i;
+	int		flag;
+	int		j;
 	char	*result;
 
+	d_printf("[check_dollar]");
 	status->line = line;
 	i = 0;
 	j = 0;
 	flag = 0;
-//	result = line;
 	while (line[i] != '\0')
 	{
 		search_env_variable(line, &i, &flag);
 		if (j == 0)
 			result = ft_substr(line, j, i - j);
 		else
-			result = ft_strjoin_free(result, ft_substr(line, j, i - j), FIRST_FREE);
+			result = ft_strjoin_free(result, ft_substr(line, j, i - j), \
+				FIRST_FREE);
 		if (line[i] == '$')
 			result = process_dollar(status, result, &i, &flag);
 		j = i;
@@ -313,7 +343,7 @@ int	process_quotes(char *line, int *value, int *i, int *flag)
 	while ((analysis_char(line[*i]) == *value || *flag & IN_QUOTE) && line[*i] != '\0')
 	{
 		if (line[*i] == '\'' && *flag & S_QUOTE)
-			*flag-= S_QUOTE;
+			*flag -= S_QUOTE;
 		else if (line[*i] == '\"' && *flag & D_QUOTE)
 			*flag -= D_QUOTE;
 		else if (line[*i] == '\'' && !(*flag & IN_QUOTE))
@@ -328,7 +358,7 @@ int	process_quotes(char *line, int *value, int *i, int *flag)
 	return (j);
 }
 
-t_stack	*search_last_stack(t_info *status)//最後のstackを探して返す
+t_stack	*search_last_stack(t_info *status)
 {
 	t_stack	*data;
 
@@ -341,10 +371,11 @@ t_stack	*search_last_stack(t_info *status)//最後のstackを探して返す
 void make_input_redirect(int *flag, char *line, int j, t_info *status)
 {
 	t_stack	*data;
+	char	*str;
 
 	data = search_last_stack(status);
 	d_printf(" : no*flag redirect", 1);
-	char *str = make_list(flag, line, j, &data->inputlist);
+	str = make_list(flag, line, j, &data->inputlist);
 	check_flag(status, str, flag);
 	*flag = *flag - INPUT_REDIRECT;
 }
@@ -352,9 +383,9 @@ void make_input_redirect(int *flag, char *line, int j, t_info *status)
 void make_output_redirect(int *flag, char *line, int j, t_info *status)
 {
 	t_stack	*data;
+	char	*str;
 
 	data = search_last_stack(status);
-	char *str;
 	d_printf(" : RE redirect", 1);
 	str = make_list(flag, line, j, &data->outputlist);
 	check_flag(status, str, flag);
@@ -376,8 +407,8 @@ void	make_heredoc_list(int *flag, char *line, int j, t_info *status)
 
 void make_append_list(int *flag, char *line, int j, t_info *status)
 {
-	char *str;
 	t_stack	*data;
+	char 	*str;
 
 	data = search_last_stack(status);
 	d_printf(" : append", 1);
@@ -400,8 +431,8 @@ void make_command_list(int *flag, char *line, int j, t_info *status)
 
 void make_other_list(int *flag, char *line, int j, t_info *status)
 {
-	char *str;
 	t_stack	*data;
+	char	*str;
 
 	data = search_last_stack(status);
 	d_printf(" : *flag or file");
@@ -445,7 +476,9 @@ int	process_input_redirect_operation(t_info *status, char *line, int *flag)
 	{
 		d_printf(" : heredoc", 1);
 		*flag = *flag | HEREDOC;
-	} else if (i == 1) {
+	}
+	else if (i == 1)
+	{
 		d_printf(" : redirect", 1);
 		*flag = *flag | INPUT_REDIRECT;
 	}
@@ -463,20 +496,20 @@ int	process_output_redirect_operation(t_info *status, char *line, int *flag)
 		d_printf("%c", line[i]);
 		i++;
 	}
-	if (2 < i || (*flag& NEED_FILE))
+	if (2 < i || (*flag & NEED_FILE))
 	{
 		error_printf(" : syntax error near unexpected token `>'", 1);
-		*flag+= ERROR;
+		*flag += ERROR;
 	}
 	else if (i == 2)
 	{
 		d_printf(" : re:heredoc", 1);
-		*flag= *flag| APPENDDOC;
+		*flag = *flag | APPENDDOC;
 	}
 	else if (i == 1)
 	{
 		d_printf(" : re:redirect", 1);
-		*flag= *flag| OUTPUT_REDIRECT;
+		*flag = *flag | OUTPUT_REDIRECT;
 	}
 	return (i);
 	(void)status;
@@ -484,18 +517,19 @@ int	process_output_redirect_operation(t_info *status, char *line, int *flag)
 
 # define PIPE_IN 0
 # define PIPE_OUT 1
+
 void close_pipe(t_info *status, int *pipefd)
 {
-        close_ee(status, pipefd[0]);
-        close_ee(status, pipefd[1]);
+	close_ee(status, pipefd[0]);
+	close_ee(status, pipefd[1]);
 }
 
 void dup2_close_pipe(t_info *status, int *pipefd, int flag)
 {
 	if (flag == PIPE_IN)
-        dup2_ee(status, pipefd[0], flag);
+		dup2_ee(status, pipefd[0], flag);
 	else if (flag == PIPE_OUT)
-        dup2_ee(status, pipefd[1], flag);
+		dup2_ee(status, pipefd[1], flag);
 	close_pipe(status, pipefd);
 }
 
@@ -503,8 +537,6 @@ int	process_pipe_operation(t_info *status, char *line, int *flag)
 {
 	int		i;
 	t_stack	*data;
-//	pid_t	pid;
-//	int		pipefd[2];
 
 	i = 0;
 	data = status->stack;
@@ -520,28 +552,7 @@ int	process_pipe_operation(t_info *status, char *line, int *flag)
 	}
 	else if (i == 1)
 	{
-//			d_printf(" : pipe", 1);
-//			*flag = AT_PIPE;
-//			if (pipe(pipefd) < 0)
-//				error_exit("pipe");
-//			d_printf("do-fork");
-//			pid = fork();
-//			if (pid < 0)
-//				error_exit("fork");
-//			if (pid == 0)
-//			{
-//				if (status->pre_pipe1 != -1)
-//					dup2_close_pipe(status->pre_pipe0, status->pre_pipe1, STDIN_FILENO);
-//				dup2_close_pipe(pipefd[0], pipefd[1], STDOUT_FILENO);
-//				status->pid = 1;
-				check_command(status, status->stack);
-//			}
-//			if (status->pre_pipe1 != -1)
-//				close_pipe(status->pre_pipe0, status->pre_pipe1);
-//			status->pre_pipe1 = pipefd[1];
-//			status->pre_pipe0 = pipefd[0];
-//			status->pid = pid;
-//			data = make_stack(status, data);
+		check_command(status, status->stack);
 	}
 	return (i);
 	(void)status;
@@ -586,7 +597,6 @@ char	*mini_ft_strchr(const char *s, int c)
 	chr = (char)c;
 	while (*str || chr == '\0')
 	{
-
 		if (*str == chr)
 			return (str);
 		str++;
@@ -602,22 +612,22 @@ void	check_error(t_info *status, char *line, int *e_flag)
 	int	value;
 
 	flag = 0;
-	while(*line != '\0')
+	while (*line != '\0')
 	{
 		i = 0;
 		value = analysis_char(*line);
-		if (value == 1 || value == 0)// command系の処理
+		if (value == 1 || value == 0)
 		{
 			j = process_quotes(line, &value, &i, &flag);
 			check_input_operation(status, line, j, &flag);
 		}
-		if (value == 2)// ' '
+		if (value == 2)
 			i++;
-		else if (value == 3 && !(flag & IN_QUOTE))// < << <<<　ここは完成
+		else if (value == 3 && !(flag & IN_QUOTE))
 			i += process_input_redirect_operation(status, line, &flag);
-		else if (value == 4 && !(flag & IN_QUOTE))// > >> >> ここは完成
+		else if (value == 4 && !(flag & IN_QUOTE))
 			i += process_output_redirect_operation(status, line, &flag);
-		else if (value == 6 && !(flag & IN_QUOTE))// |
+		else if (value == 6 && !(flag & IN_QUOTE))
 			i += check_pipe_operation(status, line, &flag);
 		line += i;
 	}
@@ -633,17 +643,17 @@ void	check_error(t_info *status, char *line, int *e_flag)
 void	process_input_operation(t_info *status, char *line, int j, int *flag)
 {
 	if (*flag & INPUT_REDIRECT)
-		make_input_redirect(flag, line,  j, status);
+		make_input_redirect(flag, line, j, status);
 	else if (*flag & OUTPUT_REDIRECT)
-		make_output_redirect(flag, line,  j, status);
+		make_output_redirect(flag, line, j, status);
 	else if (*flag & HEREDOC)
-		make_heredoc_list(flag, line,  j, status);
+		make_heredoc_list(flag, line, j, status);
 	else if (*flag & APPENDDOC)
-		make_append_list(flag, line,  j, status);
+		make_append_list(flag, line, j, status);
 	else if (!(*flag & COMMAND))
-		make_command_list(flag, line,  j, status);
+		make_command_list(flag, line, j, status);
 	else
-		make_other_list(flag, line,  j, status);
+		make_other_list(flag, line, j, status);
 }
 
 void	exec_panda(char *line, t_info *status, int flag)
diff --git a/srcs/lexer_panda/make_env_list.c b/srcs/lexer_panda/make_env_list.c
index 57745b2..61f7f0d 100644
--- a/srcs/lexer_panda/make_env_list.c
+++ b/srcs/lexer_panda/make_env_list.c
@@ -6,7 +6,7 @@
 /*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/09/11 19:41:29 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/09/27 14:43:29 by tokazaki         ###   ########.fr       */
+/*   Updated: 2023/10/03 12:42:56 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -20,8 +20,8 @@ void	make_pwd__shvl___env(t_info *status)
 
 	envlist = NULL;
 	path = getcwd(buf, PATH_MAX);
-	if (path == NULL) //PATH_MAXより長いディレクトリだった場合error
-		exit(1) ;
+	if (path == NULL)
+		exit (1);
 	push_back(&envlist, ft_strjoin_free("PWD=", path, NEITHER_FREE));
 	push_back(&envlist, ft_strdup("SHLVL=1"));
 	push_back(&envlist, ft_strdup("_=/usr/bin/env"));
@@ -30,7 +30,7 @@ void	make_pwd__shvl___env(t_info *status)
 
 void	make_env_list(t_info *status, char *env[])
 {
-	int				i;
+	int		i;
 	t_list	*envlist;
 
 	i = 0;
@@ -47,21 +47,20 @@ void	make_env_list(t_info *status, char *env[])
 
 char	*search_env(t_info *status, char *str)
 {
-	d_printf("[search_env]");
 	t_list	*env;
 	char	*searched_word;
 	int		len;
 
+	d_printf("[search_env]");
 	env = status->env;
 	if (!env)
 		return (NULL);
 	searched_word = ft_strjoin_free(str, "=", NEITHER_FREE);
-	//status->error
 	len = ft_strlen(searched_word);
-	d_printf("[%s:%d : %s]",searched_word,len,env->content);
-	while (env != NULL) //最後まで行った時を考えて->nextではない方がいい？
+	d_printf("[%s:%d : %s]", searched_word, len, env->content);
+	while (env != NULL)
 	{
-//	ft_printf("[%s:%d : %s]\n",searched_word,len,env->content);
+		d_printf("[%s:%d : %s]\n", searched_word, len, env->content);
 		if (ft_strncmp(env->content, searched_word, len) == 0)
 			break ;
 		env = env->next;
@@ -74,18 +73,17 @@ char	*search_env(t_info *status, char *str)
 
 t_list	*search_envlist_for_export(t_info *status, char *str)
 {
-	d_printf("[search_envlist_forexport]");
 	t_list	*env;
 	int		len;
 	char	*searched_word;
 
+	d_printf("[search_envlist_forexport]");
 	env = status->env;
 	if (!env)
 		return (NULL);
-	//status->error
 	searched_word = ft_strjoin_free(str, "=", NEITHER_FREE);
 	len = ft_strlen(searched_word);
-	d_printf("[%s:%d]",searched_word,len);
+	d_printf("[%s:%d]", searched_word, len);
 	while (env != NULL)
 	{
 		if (ft_strncmp(env->content, searched_word, len) == 0)
@@ -100,18 +98,17 @@ t_list	*search_envlist_for_export(t_info *status, char *str)
 
 t_list	*search_envlist(t_info *status, char *str)
 {
-	d_printf("[search_envlist]");
 	t_list	*env;
 	char	*searched_word;
 	int		len;
 
+	d_printf("[search_envlist]");
 	env = status->env;
 	if (!env)
 		return (NULL);
 	searched_word = ft_strjoin_free(str, "=", NEITHER_FREE);
-	//status->error
 	len = ft_strlen(searched_word);
-	d_printf("[%s:%d]",searched_word,len);
+	d_printf("[%s:%d]", searched_word, len);
 	while (env != NULL)
 	{
 		if (ft_strncmp(env->content, searched_word, len) == 0)
diff --git a/srcs/lexer_panda/make_list.c b/srcs/lexer_panda/make_list.c
index af2e2a3..208152e 100644
--- a/srcs/lexer_panda/make_list.c
+++ b/srcs/lexer_panda/make_list.c
@@ -6,7 +6,7 @@
 /*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/09/05 18:28:35 by tokazaki          #+#    #+#             */
-/*   Updated: 2023/09/30 13:29:55 by tokazaki         ###   ########.fr       */
+/*   Updated: 2023/10/03 12:35:04 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -30,19 +30,17 @@ char	*make_tmp_file(t_info *status, int *tmp_fd)
 	while (*tmp_fd != -1 && errno != ENOENT && nbr < 5000)
 	{
 		char_nbr = ft_itoa(nbr);
-		tmp_file_name = ft_strjoin_free(origin_file_name, char_nbr, SECOND_FREE);
+		tmp_file_name = ft_strjoin_free(origin_file_name, char_nbr, \
+				SECOND_FREE);
 		*tmp_fd = open(tmp_file_name, O_APPEND | O_RDWR, 0);
 		nbr++;
 	}
 	free(origin_file_name);
-	//*tmp_fd がファイルが存在しないので開けない場合
-	//ファイルをtmpファイルを作成する
 	*tmp_fd = open_ee(status, tmp_file_name, O_CREAT | O_APPEND | O_RDWR, \
-		S_IRWXU | S_IRGRP| S_IROTH);
-	if (*tmp_fd < 0)
-		return (NULL);
+			S_IRWXU | S_IRGRP | S_IROTH);
+	if (*tmp_fd < 0 || status->error == 0)
+		exit (1);
 	return (tmp_file_name);
-	(void)status;
 }
 
 char	*check_command_path(t_info *status, char *result)
@@ -60,7 +58,6 @@ char	*check_command_path(t_info *status, char *result)
 
 char	*check_flag(t_info *status, char *result, int *flag)
 {
-//	return ;//ここで一回止めてる
 	d_printf("[check_flag]");
 	if (*flag & INPUT_REDIRECT)
 		check_infile(status, result);
@@ -74,7 +71,6 @@ char	*check_flag(t_info *status, char *result, int *flag)
 		check_appendfile(status, result);
 	else if (!(*flag & COMMAND))
 	{
-	//	data->content = check_command_path(status, ft_strjoin_free("/", result));
 		check_command_path(status, ft_strjoin_free("/", result, NEITHER_FREE));
 	}
 	d_printf("\n[[%s]]", result);
@@ -91,7 +87,7 @@ int	search_dollar(char *line)
 		while (line[i] != '$')
 		{
 			if (line[i] == '\0')
-				return (i) ;
+				return (i);
 			i++;
 		}
 		i++;
@@ -105,7 +101,6 @@ int	search_dollar(char *line)
 			d_printf("$$ : PID\n");
 			i++;
 		}
-
 	}
 }
 
@@ -113,12 +108,10 @@ char	*make_list(int *flag, char *line, int len, t_list **list)
 {
 	char	*result;
 
-//	len = search_dollar(line);
 	result = ft_substr(line, 0, len);
 	if (!result)
 	{
-//		status->error == 1;
-		return (NULL);
+		exit (1);
 	}
 	push_back(list, result);
 	return (result);
diff --git a/srcs/lexer_panda/redirection_operators.c b/srcs/lexer_panda/redirection_operators.c
index 47fcd8f..72b4579 100644
--- a/srcs/lexer_panda/redirection_operators.c
+++ b/srcs/lexer_panda/redirection_operators.c
@@ -6,7 +6,7 @@
 /*   By: hhino <hhino@student.42.fr>                +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/09/25 18:24:39 by hhino             #+#    #+#             */
-/*   Updated: 2023/09/30 19:40:19 by tokazaki         ###   ########.fr       */
+/*   Updated: 2023/10/03 12:21:24 by tokazaki         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -18,10 +18,7 @@ void	check_infile(t_info *status, char *result)
 {
 	int	fd;
 
-//	if (result[0] == '.' && result[1] == '/')
-//		fd = open_ee(status, &result[1], O_RDONLY, 0);
-//	else
-		fd = open_ee(status, result, O_RDONLY, 0);
+	fd = open_ee(status, result, O_RDONLY, 0);
 	if (fd < 0)
 	{
 		status->exit_status = 1;
@@ -49,12 +46,8 @@ void	check_outfile(t_info *status, char *result)
 {
 	int	fd;
 
-//	if (result[0] == '.' && result[1] == '/')
-//		fd = open_ee(status, &result[1], O_CREAT | O_TRUNC | O_WRONLY,
-//			S_IRWXU | S_IRGRP | S_IROTH);
-//	else
-		fd = open_ee(status, result, O_CREAT | O_TRUNC | O_WRONLY,
-			S_IRWXU | S_IRGRP | S_IROTH);
+	fd = open_ee(status, result, O_CREAT | O_TRUNC | O_WRONLY, \
+		S_IRWXU | S_IRGRP | S_IROTH);
 	if (fd < 0)
 	{
 		status->exit_status = 1;
@@ -69,12 +62,8 @@ void	check_appendfile(t_info *status, char *result)
 {
 	int	fd;
 
-//	if (result[2] == '.' && result[1] == '/')
-//		fd = open_ee(status, &result[1], O_CREAT | O_APPEND | O_WRONLY,
-//			S_IRWXU | S_IRGRP | S_IROTH);
-//	else
-		fd = open_ee(status, result, O_CREAT | O_APPEND | O_WRONLY,
-			S_IRWXU | S_IRGRP | S_IROTH);
+	fd = open_ee(status, result, O_CREAT | O_APPEND | O_WRONLY, \
+		S_IRWXU | S_IRGRP | S_IROTH);
 	if (fd < 0)
 	{
 		status->exit_status = 1;
